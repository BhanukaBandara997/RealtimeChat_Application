
package server;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Service", targetNamespace = "http://Server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Service {


    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendMessage", targetNamespace = "http://Server/", className = "server.SendMessage")
    @ResponseWrapper(localName = "sendMessageResponse", targetNamespace = "http://Server/", className = "server.SendMessageResponse")
    @Action(input = "http://Server/Service/sendMessageRequest", output = "http://Server/Service/sendMessageResponse")
    public boolean sendMessage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createThread", targetNamespace = "http://Server/", className = "server.CreateThread")
    @ResponseWrapper(localName = "createThreadResponse", targetNamespace = "http://Server/", className = "server.CreateThreadResponse")
    @Action(input = "http://Server/Service/createThreadRequest", output = "http://Server/Service/createThreadResponse")
    public boolean createThread(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllGroupsList", targetNamespace = "http://Server/", className = "server.GetAllGroupsList")
    @ResponseWrapper(localName = "getAllGroupsListResponse", targetNamespace = "http://Server/", className = "server.GetAllGroupsListResponse")
    @Action(input = "http://Server/Service/getAllGroupsListRequest", output = "http://Server/Service/getAllGroupsListResponse")
    public List<String> getAllGroupsList();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "loginClient", targetNamespace = "http://Server/", className = "server.LoginClient")
    @ResponseWrapper(localName = "loginClientResponse", targetNamespace = "http://Server/", className = "server.LoginClientResponse")
    @Action(input = "http://Server/Service/loginClientRequest", output = "http://Server/Service/loginClientResponse")
    public boolean loginClient(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "receiveMessage", targetNamespace = "http://Server/", className = "server.ReceiveMessage")
    @ResponseWrapper(localName = "receiveMessageResponse", targetNamespace = "http://Server/", className = "server.ReceiveMessageResponse")
    @Action(input = "http://Server/Service/receiveMessageRequest", output = "http://Server/Service/receiveMessageResponse")
    public List<String> receiveMessage();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editThreadName", targetNamespace = "http://Server/", className = "server.EditThreadName")
    @ResponseWrapper(localName = "editThreadNameResponse", targetNamespace = "http://Server/", className = "server.EditThreadNameResponse")
    @Action(input = "http://Server/Service/editThreadNameRequest", output = "http://Server/Service/editThreadNameResponse")
    public boolean editThreadName(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editSingleThread", targetNamespace = "http://Server/", className = "server.EditSingleThread")
    @ResponseWrapper(localName = "editSingleThreadResponse", targetNamespace = "http://Server/", className = "server.EditSingleThreadResponse")
    @Action(input = "http://Server/Service/editSingleThreadRequest", output = "http://Server/Service/editSingleThreadResponse")
    public boolean editSingleThread(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "registerClient", targetNamespace = "http://Server/", className = "server.RegisterClient")
    @ResponseWrapper(localName = "registerClientResponse", targetNamespace = "http://Server/", className = "server.RegisterClientResponse")
    @Action(input = "http://Server/Service/registerClientRequest", output = "http://Server/Service/registerClientResponse")
    public boolean registerClient(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

}
